# -*- coding: utf-8 -*-
"""Desafio4DNC - Philippe Izid√≥rio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hBpOvdy6SYJW4FjQf8PuUkzHog89Q9Kz
"""

# Commented out IPython magic to ensure Python compatibility.
#importando bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %pip install plotly
# %pip install cufflinks
# %pip install chart-studio
import chart_studio.plotly as py
import cufflinks as cf
import plotly.graph_objects as go
import plotly.express as px
from sklearn.linear_model import LinearRegression

#importando e visulizando a base
base_c = pd.read_csv("/content/MKT.csv", sep=",")
base_c.head()

#verificando formato dos dados e poss√≠vel aus√™ncia dos mesmos
base_c.info()

#Analisando o dataset com describe
base_c.describe()

#Analisando a coluna "Youtube" com boxplot
fig = px.box(base_c, x="youtube")
fig.update_traces(line_color="green")

#Analisando a coluna "facebook" com boxplot
fig = px.box(base_c, x="facebook")
fig.update_traces(line_color="green")

#Analisando a coluna "newspaper" com boxplot
fig = px.box(base_c, x="newspaper")
fig.update_traces(line_color="green")

#Analisando a coluna "sales" com boxplot
fig = px.box(base_c, x="sales")
fig.update_traces(line_color="green")

#Entendendo a correla√ß√£o
sns.pairplot(base_c)

#Especificando as vari√°veis 'x' e 'y' para ver a correla√ß√£o somente com as vendas
sns.pairplot(base_c, x_vars=['youtube', 'facebook', 'newspaper'], y_vars='sales')

#Entendendo a correla√ß√£o em n√∫meros
base_c.corr()

#Plotando heatmap para vermos visualmente as correla√ß√µes com 'sales'.
#Podemos identificar que os investimentos nas plataformas 'Youtube' e 'Facebook' s√£o os mais impactantes na gera√ß√£o de vendas e leads.
sns.heatmap(base_c.corr(), annot=True)

#Checando a distribui√ß√£o de vendas.
#Pode-se perceber que as vendas s√£o, em sua maioria, entre $10-$20.
sns.histplot(base_c["sales"])

#Separando as vari√°veis
x = base_c[['youtube', 'facebook', 'newspaper']]

y = base_c[["sales"]]

#importanto test_split e definindo as bases de treino e teste
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, train_size=0.7, test_size=0.3, random_state=42)

#Verificando tamanho das bases
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

#Momento de treinar os dados com regress√£o linear
ln = LinearRegression()
ln.fit(x_train, y_train)

#Ap√≥s treinado, vamos predizer o 'y' com base no 'x_test' usando fun√ß√£o .predict()
y_pred = ln.predict(x_test)

#trazendo m√©trica R¬≤ Score do sklearn para medir a qualidade da correla√ß√£o
from sklearn.metrics import r2_score
rscore = r2_score(y_test, y_pred)

#Imprimindo a qualidade na correla√ß√£o entre os valores da base 'y_test' e os preditos em 'x_test'
print("O R¬≤ √© de:", rscore)

#plotando gr√°fico da compara√ß√£o entre y_test e as predi√ß√µes de y_pred
c = [i for i in range(1,53,1)]
fig = plt.figure(figsize=(10,8))
plt.plot(c, y_test, color="blue")
plt.plot(c, y_pred, color="red")
plt.xlabel("Index ou Linha")
plt.ylabel("Vendas")

#Premissas para previs√£o de vendas
youtube = 190
facebook = 60
newspaper = 20
entrada = [[youtube,facebook,newspaper]]
prever = ln.predict(entrada)[0][0]
print(f'O retorno de vendas esperado √© de: ${prever:.2f}')

"""# üü¢ **CONSIDERA√á√ïES FINAIS:**

**Com base no que foi analisado em etapas anteriores, recomenda-se persistir um investimento acima da m√©dia no Youtube, incrementar o investimento m√©dio no Facebook direcionando boa parte dos investimento de 'newspaper', uma vez que esse vem demonstrando baixo desempenho em seus resultados.**
"""